SERVICES
	---> A managed software offering that can be used by an application.
	
	--> Binding a Service Instance - VCAP_SERVICES Env't Variable

		cf bind-service <APP-NAME> <SERVICE-INSTANCE>

		* Arbitrary Parameters ---> adds a list of configuration parameters
			cf bind-service <APP-NAME> <SERVICE-INSTANCE> -c '{"role": "read-only"}'
	
		* Binding with App Manifest ---> using the app manifest to bind the service instance
			services:
				- test-mysql-01

		* Named Service Bindings
			cf bind-service <APP-NAME> <SERVICE-INSTANCE> --binding-name 'postgres-database'

	--> Update Service Credentials
		=> To update service
		1. bind/unbind the service instance		
			cf bind-service | unbind-service <APP-NAME> <SERVICE-INSTANCE>
		2. restart or re-push the app 

===========================================================================
	--> Managed Service Flow ==> [cf marketplace] -> [cf create-service] -> [cf bind-service] -> [cf restart or cf restage]	

	--> Managing Service Instances with the CF CLI
		* List Marketplace Services 
			---> cf marketplace | m
			=> Service-name, Plans, Description, Broker

		* Creating Service Instances 
			---> cf create-service <SERVICE-NAME> <SERVICE-PLAN> <SERVICE-INSTANCE>
		
		* List Service Instances
			---> cf services ---> list the service instances in your target space.
			---> cf service <SERVICE-NAME> ---> return a particular service instance detail

		* bind a service instance ---> MEANING ---> CF is passing credentials to our app through an ENVIRONMENT VARIABLE called VCAP_SERVICES
			= To an APP
				---> cf bind-service <APP-NAME> <SERVICE-INSTANCE>
				---> cf restart <APP-NAME>
			= To a ROUTE
				---> cf bind-route-service cfapps.io --hostname <APP-NAME> <SERVICE-INSTANCE>
		
		* unbind a service instance
			---> cf unbind-service <APP-NAME> <SERVICE-INSTANCE>

		* rename a service instance
			---> cf rename-service <APP-NAME> <SERVICE-INSTANCE>

		* update a service instance
			---> cf update-service <SERVICE-INSTANCE> -p new-plan

		* upgrade a service instance
			---> cf services
			- upgrade available column --> tells whether there is an upgrade or not.
			
			---> cf update-service <SERVICE-INSTANCE> --upgrade

		* delete a service instance
			---> cf delete-service <SERVICE-INSTANCE>
===========================================================================
		
# Service Broker API
	---> an HTTP interface between the SERVICE MARKETPLACE of a platform and SERVICE BROKERS.

# Service Brokers
	---> Is the component of the SERVICE that implements the SERVICE BROKER API
	---> Responsible for advertising a catalog of service offerings and service plans to the marketplace

	---> two steps are required to make the services available to the end users
	1) Register Service Broker
		cf create-service-broker <BROKER-NAME> SOMEUSER SOMETHINGSECURE https://mybroker.example.com
	2) Make plans publicly available in the catalog

	---> List Service Brokers
		* cf service-brokers
	---> Update a Broker
		* cf update-service-broker <BROKER-NAME> SOMEUSER SOMETHINGSECURE https://mybroker.example.com
	---> Rename a Broker
		* cf rename-service-broker <BROKER-NAME> <NEW-BROKER-NAME>
	---> Remove a Broker
		* cf delete-service-broker <BROKER-NAME>
	---> Purge a Service
		= If a service broker has been shut down or removed without first deleting service instances from a CF, 
		  it is unable to remove the service broker or its services and plans from the marketplace
		* cf purge-service-offering service-test
		* cf purge-service-instance <SERVICE-INSTANCE-NAME>

	---------------------

	===> How do a SERVICE BROKER and the CLOUD CONTROLER intercooperate?
		* the basic auth username and password which are provided when adding a broker are encrypted in CF-DB, 
		  and used by the Cloud Controller to authenticate with the broker when making all API calls.
	===> Service Broker endpoint
		* Catalog Endpoint - makes the plans in the service available for users
		* Auth Endpoint - enables Cloud Controller to authenticate the service broker with Username and Password.
	===> SERVICE BROKER -- can be deployed somewhere that CLOUD CONTROLLER can reach it via HTTPS call.
		--- can live inside PCF as an application or outside of PCF
	===> SERVICE BROKER is required to respond with in 60 SECONDs by the CLOUD CONTROLLER

	---------------------

# Service Instance
	---> an instantiation of a service offering

# Service Binding
	---> an association between an application and a service instance.

========================================================

# Managed Services 
	---> DEFINITION = is the practice of OUTSOURCING certain processes and functions intended to improve operations and cut expenses
	---> concept of -> "How to integrate a software service with PCF to create ---> Managed Service and Service Tile for PCF"

# Service Instance Lifecycle & Use
	---> To view a SPECIFIC MARKETPLACE plan detail
		- cf marketplace -s <MARKETPLACE-SERVICE-NAME>
		eg. cf marketplace -s cleardb

	---> To CREATE a SERVICE-INSTANCE
		cf create-service <MARKETPLACE-SERVICE-NAME> <SERVICE-PLAN> <SERVCE-INSTANCE-NAME>
		eg. cf create-service cleardb spark my-cleardb

	---> To check a SERVICE-INSTANCE status
		cf service <SERVICE-INSTANCE-NAME>
		eg. cf service my-cleardb ----> return detail info - like status: create succeeded

	---> To UPDATE a service-instance
		cf update-service <SERVICE-INSTANCE> -c '{"PARAMETER": "VALUE"}'
		eg. cf update-service my-cleardb -c '{"count": 3}'
	
		cf service my-cleardb ----> return detail info - like status: update succeeded


# User-Provided Service Instances (UPSI)
	---> enable developers to USE SERVICES that are not available in the marketplace with their apps running on CF
	---> created manually and are not visible in the marketplace
	---> are arbitrary set of key-value pairs

	* CREATE a User-Provided Service Instance
		- cups = create-user-provided-service
		cf cups SERVICE_INSTANCE [-p CREDENTIALS] [-l SYSLOG_DRAIN_URL] [-r ROUTE_SERVICE_URL] [-t TAGS]

		eg. cf cups SERVICE_INSTANCE -p '{"username":"admin", "password":"pa55woRD"}'
		    cf cups SERVICE_INSTANCE -l syslog://example.log-aggregator.com

	* UPDATE a User-Provided Service Instance
		- uups = update-user-provided-service
		cf uups SERVICE_INSTANCE [-p CREDENTIALS] [-l SYSLOG_DRAIN_URL] [-r ROUTE_SERVICE_URL] [-t TAGS]

# Sharing Service Instances
	---> To Share an existing SPRING CLOUD SERVICES service instance
		cf share-service <SERVICE-INSTANCE-NAME> [-o ORG-NAME] [-s SPACE-NAME]

	---> Unshare a service instance
		cf unshare-service <SERVICE-INSTANCE-NAME> [-o ORG-NAME] [-s SPACE-NAME]

# Space Scoped Brokers
	---> are registered to a specific space, and ALL USERS within that space can automatically access the broker's service plan.
	---> CREATED BY SPACE DEVELOPERS
	---> service visibility is not managed separately.

	[ cf create-service-broker --space-scoped ]

	= SERVICE-ACCESS
		* cf service-access [-b BROKER] [-e SERVICE] [-o ORG]
			---> list service access settings of a particular broker, service offering or organization
		* Enable Service Access - enable a service or service plan for one or all orgs
			cf enable-service-access [-b BROKER] [-p PLAN] [-o ORG]
		* Disable Service Access
			cf disable-service-access [-b BROKER] [-p PLAN] [-o ORG]

# VCAP_APPLICATION
	---> contains the associated attributes for a DEPLOYED APP
	---> Attributes 
		* application_id, application_name, application_uris, application_version
		* cf_api, host, limits, name
		* organization_id, organization_name
		* process_id, process_type
		* space_id, space_name
		* start, started_at, start_at_timestamp
		* state_timestamp, uris, users, version

# VCAP_SERVICES
	---> contains CONNECTION details
	---> Attributes
		* binding_name, instance_name, name, label, tags, plan, credentials

# Service Keys
	=> generate credentials for manually configuring consumers of marketplace services.

	* Create a Service Key
		cf create-service <SERVICE-INSTANCE> <KEY>
	
	* List Service Keys for a service instance
		cf service-keys <SERVICE-INSTANCE>
	
	* Delete a service key
		cf delete-service-key <SERVICE-INSTANCE> <KEY>
		cf delete-service-key -f <SERVICE-INSTANCE> <KEY>
			* -f ---> to force deletion without confirmation.

==========================================

https://docs.cloudfoundry.org/services/route-services.html#examples

# ROUTE SERVICES
	---> is a kind of marketplace services
	---> sit infront of an app to PROCESS or TRANSOFRM a request before being routed to an app.
	---> are BIND to an app route, NOT with the app
	---> are decoupled from app.

	=> There are 3 MODELS for Route Service
		1 - Fully-Brokered Services
			* Assumption - App's route bind with Route Service
			* Client Request come to the CF Router through Load Balancer, 
     			  CF Router redirect the request to the Route Service Instance (related with => Service Borker), 
			  then Route Service redirect the request back to CF Router through Load Balancer,
			  then the CF Router forward the request to the APP

			* cf create-service BROKER-SERVICE-PLAN SERVICE-INSTANCE
			  cf bind-route-service APP-DOMAIN SERVICE-INSTANCE [--hostname HOSTNAME][--path PATH]

			NOTE:- 	bind-service ---> binds APP with SERVICE-INSTANCE
				bind-route-service ---> binds APP ROUTE with SERVICE-INSTANCE

		2 - Static, Brokered Services
			* an operator installs a static routing service outside of CF --> it could be a piece of hardware, infront of the load balancer
			* the Routing Service runs OUTSIDE of CF
			* Client Request goes directly to the Route Service Instance,
			  then Route Service Intance forward the request to CF Router through Load Balancer,
			  then CF Router pass the request to the APP

		3 - User-provided Services
			* if a Route Service is not listed in the CF marketplace by broker, a developer can bind "local app" as a user-provided service.
			* the steps is the same as Fully-Brokered Services

			* cf cups SERVICE-INSTANCE -r ROUTE-SERVICE-URL or -p '{"URL": "route-service-url"}'
			  cf bind-route-service APP-DOMAIN SERVICE-INSTANCE [--hostname HOSTNAME][--path PATH]

